function map=pmkmp(n,scheme)% PMKMP Returns perceptually balanced colormaps with rainbow-like colors%   PMKMP(N,SCHEME) returns an Nx3 colormap.%   usage: map=pmkmp(n,scheme);%% JUSTIFICATION: rainbow, or spectrum color schemes are considered a poor% choice for scientific data display by many in the scientific community% (see for example reference 1 and 2) in that they introduce artifacts% that mislead the viewer. "The rainbow color map appears as if it�s separated% into bands of almost constant hue, with sharp transitions between hues.% Viewers perceive these sharp transitions as sharp transitions in the data,% even when this is not the casein how regularly spaced (interval) data are% displayed (quoted from reference 1). This submission is intended to share% the results of my work to create more perceptually balanced,% rainbow-like color maps. Please see output arguments section for descriptions.%%%   arguments: (input)%   scheme - can be one of the following strings:%     'IsoL'      Lab-based isoluminant rainbow with constant lightness L*=60%                  For interval data displayed with external lighting%%     'IsoAZ'      Lightness-Chroma-Hue based isoluminant rainbow going%                  around the full Hue circle.%                  For azimuthal and phase data.%%     'IsoAZ180'   Lightness-Chroma-Hue based isoluminant rainbow going%                  around the full Hue circle twice. For azimuthal and%                  phase data where information 180 degrees apart is%                  equivalent, for example facture orientation.%%     'LinearL'	  Lab-based linear lightness rainbow.%                  For interval data displayed without external lighting%                  100% perceptual%%     'LinLhot'	  Linear lightness modification of Matlab's hot color palette.%                  For interval data displayed without external lighting%                  100% perceptual%%     'CubicYF'	   Lab-based rainbow scheme with cubic-law lightness(default)%                  For interval data displayed without external lighting%                  100% perceptual%%     'CubicL'	   Lab-based rainbow scheme with cubic-law lightness%                  For interval data displayed without external lighting%                  As above but has red at high end (a modest deviation from%                  100% perceptual)%%     'Swtth'      Lab-based rainbow scheme with sawtooth-shaped lightness%                  lightness profile. For hardcore rainbow fans.%%     'Edge'       Diverging Black-blue-cyan-white-yellow-red-black scheme%                  For ratio data (ordered, constant scale, natural zero)%%   n - scalar specifying number of points in the colorbar. Maximum n=256%      If n is not specified, the size of the colormap is determined by the%      current figure. If no figure exists, MATLAB creates one.%%%   arguments: (output)%   map - colormap of the chosen scheme%   - IsoL is based on work in paper 2 in the reference section.%     In both this paper and in several others this is indicated as the%     best for displaying interval data with external lighting.%     This is so as to allow the lighting to provide the shading to%     highlight the details of interest. If lighting is combined with a%     colormap that has its own lightness function associated - even as%     simple as a linear increase this will confuse the viewer. The only%     difference from the paper is that I changed the value of constant%     lightness to L*=60 to make it brighter that the authors' example.%%   -  IsoAZ is a Lightness-Chroma-Hue based isoluminant rainbow that%      goes around the full Hue circle.For azimuthal and phase data.%      Created with code snippet below. This is a modification from an example%      by Steve Eddins on his Matlab central blog (reference 15). Steve had%      lightness increasing while as hue changed. I hold the ligthness%      constant instead to make the result isoluminant. I also use the%      Colorspace transformations function instead of the Image Processing%      Toolbox for the color conversion. Please read my blog post below for%      some examples and code snippets:%      mycarta.wordpress.com/2014/10/30/new-matlab-isoluminant-colormap-for-azimuth-data/%%   -  IsoAZ180. Very similar to the above, but full range of hues repats%      twice. Please read my blog post below:%      mycarta.wordpress.com/2014/10/30/new-matlab-isoluminant-colormap-for-azimuth-data/%%   - LinearL is a linear lightness modification of another palette from%     paper 2 in the reference. For how it was generated see my blog post:%     mycarta.wordpress.com/2012/12/06/the-rainbow-is-deadlong-live-the-rainbow-part-5-cie-lab-linear-l-rainbow/%%   - LinLhot is a linear lightness modification of Matlab's hot%     color palette. For how it was generated see my blog post:%     mycarta.wordpress.com/2012/10/14/the-rainbow-is-deadlong-live-the-rainbow-part-4-cie-lab-heated-body/%%   - CubicL too is based on some of the ideas in paper 2 in the%      reference section but rather than using a linearly increasing%      L* function such as the one used by those authors, I am%      using a compressive or cubic law function for the increase in%      L*.  L* ranges between 31 and 90 in the violet to yellowish%      portion of the colormap, then decreases to about 80 to get%      to the red (please refer to figure L_a_b_PlotsCubicL.png).%      The choice to start at 31 was a matter of taste.%      I like having violet instead of black at the cold end of the%      colormap. The latter choice was so as to have red and not%      white at the warm end  of the colorbar, which is also a%      matter of personal taste. As a result,  there is an inversion in%      the L* trend, but I believe because it is a smooth one that%      this is an acceptable compromise and the resulting%      colormap is much of an improvement over the standard%      rainbow or spectrum schemes, which  typically have at least 3 sharp%      L* inversions. Please see figures:%      L_plot_for_CubicL_colormap.png, L_plot_for_jet_colormap.png,%      and L_plot_for_spectrum_colormap.png for a demonstration.%%    - CubicYF A fully perceptual version of the above in which I eliminated%      the red tip at the high end. The work is described in papers 12 and 13.%      I've uploaded 2 figures. The first, spectrum vs cubicYF.png, is a comparison%      of lightness versus sample number for the spectrum (top left) and the%      new color palette (bottom left), and also a comparison of test surface%      (again the Great Pyramid of Giza)using the spectrum (top right)and%      the new color palette (bottom right). The second figure%      simulations color vision deficieny.png%      is a comparison of spectrum and cubicYF rainbow for all viewers.%      Left column: full color vision � for the spectrum (top left) and for the%      cubeYF rainbow (bottom left). Centre column: simulation of Deuternaopia%      for spectrum (top centre) and cubeYF rainbow (bottom centre).%      Right column: simulation of Tritanopia for spectrum (top right) and%      cubeYF rainbow (bottom right). For the cubeYF there are no%      confusing color pairs in these simulations. There are several in the%      spectrum. Please refer to reference 14 for vcolor vision deficiency%      terminoligy. For how it was generated see my blog post:%      http://mycarta.wordpress.com/2013/02/21/perceptual-rainbow-palette-the-method/%%   -  Swtth  Lab-based rainbow scheme with sawtooth-shaped lightness%      lightness profile is made up of 5 identical ramps with magnitude of%      lightness change set to 60, and alternatively negative and positive%      signs. Please compare the two profiles in L_profile_sawtooth_rainbow.png%      and L_profile_basic_rainbow.png, and also compare results on the%      Great Pyramid of Gizah in Pyramid_sawtooth_rainbow.png and%      Pyramid_basic_rainbow.png. Read more at:%      http://mycarta.wordpress.com/2014/11/13/new-rainbow-colormap-sawthoot-shaped-lightness-profile/%%   - Edge is based on the Goethe Edge Colors described in the book in%     reference 3. In practice the colormap resembles a cold color map attached%     to a warm color map. But the science behind it is rigorous and the%     experimental work is based on is very intriguing to me: an alternative%     to the Newtonian spectrum. This is not perceptually balanced in a%     strict sense but because it does not have green it is perceptually%     improved in a harmonious sense (refer to paper reference 10 for a review%     of the concept of harmony in color visualization).%%   Example1: 128-color rainbow with cubic-law lightness (default)%     %  load mandrill;%     %  imagesc(X);%     %  colormap(pmkmp(128));%     %  colorbar;%%   Example2: 128-color palette for azimuthal data%     %  a=0:8:360;%     %  b = repmat(a,[46 1]);%     %  imagesc(b);%     %  colormap(pmkmp(128,'IsoAZ'));%     %  colorbar;%%   See files examples.m, examples1.m, and example2.m for more examples.%%%   See also: JET, HSV, GRAY, HOT, COOL, BONE, COPPER, PINK, FLAG, PRISM,%             COLORMAP, RGBPLOT%%%   Other submissions of interest%%     Matlab's new Parula colormap%     http://blogs.mathworks.com/steve/2014/10/13/a-new-colormap-for-matlab-part-1-introduction/%%     Haxby color map%     www.mathworks.com/matlabcentral/fileexchange/25690-haxby-color-map%%     Colormap and colorbar utilities%     www.mathworks.com/matlabcentral/fileexchange/24371-colormap-and-color%     bar-utilities-sep-2009%%     Lutbar%     www.mathworks.com/matlabcentral/fileexchange/9137-lutbar-a-pedestrian-colormap-toolbarcontextmenu-creator%%     usercolormap%     www.mathworks.com/matlabcentral/fileexchange/7144-usercolormap%%     freezeColors%     www.mathworks.com/matlabcentral/fileexchange/7943%%%     Bipolar Colormap%     www.mathworks.com/matlabcentral/fileexchange/26026%%     colorGray%     www.mathworks.com/matlabcentral/fileexchange/12804-colorgray%%     mrgb2gray%     www.mathworks.com/matlabcentral/fileexchange/5855-mrgb2gray%%     CMRmap%     www.mathworks.com/matlabcentral/fileexchange/2662-cmrmap-m%%     real2rgb & colormaps%     www.mathworks.com/matlabcentral/fileexchange/23342-real2rgb-colormaps%%     ColorBrewer: Attractive and Distinctive Colormaps%     http://www.mathworks.com/matlabcentral/fileexchange/45208-colorbrewer--attractive-and-distinctive-colormaps%%   Acknowledgements%%     For input to do this research I was inspired by:%     ColorSpiral - http://bsp.pdx.edu/Software/ColorSpiral.m%     Despite an erroneous assumption about conversion/equivalence to%     grayscale (which CMRmap achieves correctly) the main idea is ingenious%     and the code is well written. It also got me interested in perceptual%     colormaps. See reference 5 for paper%%     For function architecture and code syntax I was inspired by:%     Light Bartlein Color Maps%     www.mathworks.com/matlabcentral/fileexchange/17555%     (and comments posted therein)%%     For idea on world topgraphy in examples.m I was inspired by:%     Cold color map%     www.mathworks.cn/matlabcentral/fileexchange/23865-cold-colormap%%     To generate the spectrum in examples1.m I used:%     Spectral and XYZ Color Functions%     www.mathworks.com/matlabcentral/fileexchange/7021-spectral-and-xyz-color-functions%%     For Lab=>RGB conversions I used:%     Colorspace transforamtions%     www.mathworks.com/matlabcentral/fileexchange/28790-colorspace-transformations%%%     For the figures in example 2 I used:%     Shaded pseudo color%     http://www.mathworks.cn/matlabcentral/fileexchange/14157-shaded-pseudo-color%%     For plots in CompareLabPlotsUsingColorspace.m I used:%     cline%     http://www.mathworks.cn/matlabcentral/fileexchange/14677-cline%%     For some ideas in general on working in Lab space:%     Color scale%     www.mathworks.com/matlabcentral/fileexchange/11037%     http://blogs.mathworks.com/steve/2006/05/09/a-lab-based-uniform-color-scale/%%     A great way to learn more about improved colormaps and making colormaps:%     MakeColorMap%     www.mathworks.com/matlabcentral/fileexchange/17552%     blogs.mathworks.com/videos/2007/11/15/practical-example-algorithm-development-for-making-colormaps/%%%  References%%     1)  Borland, D. and Taylor, R. M. II (2007) - Rainbow Color Map (Still)%         Considered Harmful%         IEEE Computer Graphics and Applications, Volume 27, Issue 2%         Pdf paper included in submission%%%     2)  Kindlmann, G. Reinhard, E. and Creem, S. Face-based lightness Matching%         for Perceptual Colormap Generation%         IEEE - Proceedings of the conference on Visualization '02%         www.cs.utah.edu/~gk/papers/vis02/FaceLumin.pdf%%     3)  Koenderink, J. J. (2010) - Color for the Sciences%         MIT press, Cambridge, Massachusset%%     4)  Light, A. and Bartlein, P.J. (2004) - The end of the rainbow?%         Color schemes for improved data graphics.%         EOS Transactions of the American Geophysical Union 85 (40)%         Reprint of Article with Comments and Reply%         http://geography.uoregon.edu/datagraphics/EOS/Light-and-Bartlein.pdf%%     5)  McNames, J. (2006) An effective color scale for simultaneous color%         and gray-scale publications%         IEEE Signal Processing Magazine, Volume 23, Issue1%         http://bsp.pdx.edu/Publications/2006/SPM_McNames.pdf%%     6)  Rheingans, P.L. (2000), Task-based Color Scale Design%         28th AIPR Workshop: 3D Visualization for Data Exploration and Decision Making%         www.cs.umbc.edu/~rheingan/pubs/scales.pdf.gz%%     7)  Rogowitz, B.E. and  Kalvin, A.D. (2001) - The "Which Blair project":%         a quick visual method for evaluating perceptual color maps.%         IEEE - Proceedings of the conference on Visualization �01%         www.research.ibm.com/visualanalysis/papers/WhichBlair-Viz01Rogowitz_Kalvin._final.pdf%%     8)  Rogowitz, B.E. and  Kalvin, A.D. - Why Should Engineers and Scientists%         Be Worried About Color?%         www.research.ibm.com/people/l/lloydt/color/color.HTM%%     9)  Rogowitz, B.E. and  Kalvin, A.D. - How NOT to Lie with Visualization%         www.research.ibm.com/dx/proceedings/pravda/truevis.htm%%     10) Wang, L. and Mueller,K (2008) - Harmonic Colormaps for Volume Visualization%         IEEE/ EG Symposium on Volume and Point-Based Graphics%         http://www.cs.sunysb.edu/~mueller/papers/vg08_final.pdf%%     11) Wyszecki, G. and Stiles W. S. (2000) - Color Science: Concepts and%         Methods, Quantitative Data and Formulae, 2nd Edition, John Wiley and Sons%%     12) Niccoli, M., (2012) - How to assess a color map - in:%         52 things you should know about Geophysics, M. Hall and E. Bianco,%         eds.%%     13) Niccoli, M., and Lynch, S. (2012, in press) - A more perceptual color%         palette for structure maps, 2012 CSEG Geoconvention extended%         abstract.%%     14) Color Blind Essentials eBook%         http://www.colblindor.com/color-blind-essentials/%%     15) Eddins, S. (2006) - A Lab-based uniform color scale%         http://blogs.mathworks.com/steve/2006/05/09/a-lab-based-uniform-color-scale/%%%  Author: Matteo Niccoli%  e-mail address: matteo@mycarta.ca%  Release: 4.04%  Release date: November 2014%  Full research at:%  http://mycarta.wordpress.com/2012/05/29/the-rainbow-is-dead-long-live-the-rainbow-series-outline/% ---% https://www.ncl.ucar.edu/Document/Graphics/color_table_gallery.shtml% error checking, defaultsnarginchk(0,2)nargoutchk(0,1)if nargin<2    scheme = 'CubicYF';endif nargin<1    n = size(get(gcf,'colormap'),1);endif n>256    error('Maximum number of 256 points for colormap exceeded');endif n<2    error('n must be >= 2');end% valid schemesswitch lower(scheme)    case 'colorbox2'        baseMap=ColorBox2;    case 'colorbox'        baseMap=ColorBox;    case 'linearl'        baseMap = LinearL;    case 'isol'        baseMap = IsoL;    case 'linlhot'        baseMap = LinLhot;    case 'cubicl'        baseMap = CubicL;    case 'edge'        baseMap = Edge;    case 'jet'        baseMap = Jet;    case 'nowhite'        baseMap = NoWhite;    case 'twocolors'        baseMap = TwoColors;    case 'cubicyf'        baseMap = CubicYF;    case 'isoaz'        baseMap = IsoAZ;    case 'isoaz180'        baseMap = IsoAZ180;    case 'swtth'        baseMap = Swtth;    case 'verd_lila'        baseMap = verd_lila;    case 'verde_marron'        baseMap = verde_marron;    case 'jet'        baseMap = jet;    case 'blanco_rojo'        baseMap = blanco_rojo;    case 'circular'        baseMap = circular;    case 'barras'        baseMap= barras;    case 'gray'        baseMap = gray;    case 'sebastia'        baseMap = sebastia;    case 'dif_colors'        baseMap = dif_colors;    case 'oceano_tierra'        baseMap = oceano_tierra;    case 'olas'        baseMap = Olas;    case 'olas_azul'        baseMap = Olas_azul;    case 'azul_rojo'        baseMap = azul_rojo;    case 'peligro'        baseMap = peligro;    case 'green'        baseMap=green;    case 'bonito'        baseMap=bonito;    case 'prueba_tim'         baseMap=prueba_tim;    case 'puntos'        baseMap=puntos;    case 'prueba_jaime'        baseMap=prueba_jaime;        case 'lluvia'        baseMap=lluvia;    case 'blanc2jet'        baseMap=blanc2jet;    case 'blanc2sunset'        baseMap=blanc2sunset;    case 'wet'        baseMap=wet;    case 'mar'        baseMap=mar;    case 'wind_elev'        baseMap=wind_elev;    case 'precip'        baseMap=precip;    otherwise        error(['Invalid scheme ' scheme])end% interpolating to get desired number of points/colors, nidx1 = linspace(1,n,size(baseMap,1));idx2 = [1:1:n];map = interp1(idx1,baseMap,idx2,'pchip');map = max(map,0); % eliminate occasional, small negative numbers% occurring at one end of the Edge colormap because of% cubic interpolationendfunction baseMap = Olas_azulbaseMap = [0.965552 0.982345 0.9990160.959400 0.978408 0.9970470.953249 0.974471 0.9950790.947097 0.970534 0.9931100.940946 0.966597 0.9911420.934794 0.962661 0.9891730.928643 0.958724 0.9872050.922491 0.954787 0.9852360.916340 0.950850 0.9832680.913264 0.948881 0.9822840.904037 0.942976 0.9793310.900961 0.941007 0.9783470.891734 0.935102 0.9753940.888658 0.933133 0.9744100.879431 0.927228 0.9714570.876355 0.925260 0.9704730.867266 0.919354 0.9675200.861361 0.915417 0.9655520.858408 0.913449 0.9645670.849550 0.907543 0.9616150.843645 0.903606 0.9596460.837739 0.899669 0.9576780.834787 0.897701 0.9566940.825928 0.891795 0.9537410.820023 0.887859 0.9517720.814118 0.883922 0.9498040.811165 0.881953 0.9488200.802307 0.876048 0.9458670.796401 0.872111 0.9438990.790496 0.868174 0.9419300.787543 0.866205 0.9409460.778685 0.860300 0.9379930.770319 0.856209 0.9351020.760477 0.852026 0.9316570.750634 0.847843 0.9282120.740792 0.843660 0.9247670.730950 0.839477 0.9213230.726028 0.837386 0.9196000.711265 0.831111 0.9144330.701423 0.826928 0.9109880.691580 0.822745 0.9075430.681738 0.818562 0.9040980.671895 0.814379 0.9006540.662053 0.810196 0.8972090.652211 0.806013 0.8937640.647290 0.803922 0.8920420.632526 0.797647 0.8868740.622684 0.793464 0.8834290.610980 0.787420 0.8804920.598431 0.780531 0.8777850.585882 0.773641 0.8750790.573333 0.766751 0.8723720.560784 0.759862 0.8696660.554510 0.756417 0.8683120.535686 0.746082 0.8642520.523137 0.739193 0.8615460.510588 0.732303 0.8588390.498039 0.725413 0.8561320.485490 0.718524 0.8534260.472941 0.711634 0.8507190.460392 0.704744 0.8480120.454118 0.701300 0.8466590.435294 0.690965 0.8425990.422745 0.684075 0.8398920.412042 0.677186 0.8362630.401953 0.670296 0.8323260.391865 0.663406 0.8283890.381776 0.656517 0.8244520.371688 0.649627 0.8205150.361599 0.642737 0.8165780.351511 0.635848 0.8126410.341423 0.628958 0.8087040.331334 0.622068 0.8047670.321246 0.615179 0.8008300.311157 0.608289 0.7968940.306113 0.604844 0.7949250.290980 0.594510 0.7890200.280892 0.587620 0.7850830.270804 0.580731 0.7811460.260715 0.573841 0.7772090.252226 0.565952 0.7730720.244106 0.557832 0.7688890.235986 0.549712 0.7647060.227866 0.541592 0.7605230.219746 0.533472 0.7563400.211626 0.525352 0.7521570.203506 0.517232 0.7479740.195386 0.509112 0.7437910.187266 0.500992 0.7396080.179146 0.492872 0.7354250.171027 0.484752 0.7312420.166967 0.480692 0.7291500.154787 0.468512 0.7228760.146667 0.460392 0.7186930.138547 0.452272 0.7145100.130427 0.444152 0.7103270.124029 0.436248 0.7044210.117878 0.428374 0.6982700.111726 0.420500 0.6921180.105575 0.412626 0.6859670.099423 0.404752 0.6798150.093272 0.396878 0.6736640.087120 0.389004 0.6675130.080969 0.381130 0.6613610.074817 0.373256 0.6552100.068666 0.365383 0.6490580.062514 0.357509 0.6429070.059439 0.353572 0.6398310.050211 0.341761 0.6306040.044060 0.333887 0.6244520.037908 0.326013 0.6183010.031757 0.318139 0.6121490.031373 0.310035 0.6004610.031373 0.301915 0.5884040.031373 0.293795 0.5763480.031373 0.285675 0.5642910.031373 0.277555 0.5522340.031373 0.269435 0.5401770.031373 0.261315 0.5281200.031373 0.253195 0.5160630.031373 0.245075 0.5040060.031373 0.236955 0.4919490.031373 0.228835 0.4798920.031373 0.224775 0.4738640.031373 0.212595 0.4557790.031373 0.204475 0.4437220.031373 0.196355 0.4316650.031373 0.188235 0.419608];endfunction baseMap = OlasbaseMap =    [0.125490 0.376471 1.0000000.125490 0.623529 1.0000000.125490 0.749020 1.0000000.000000 0.811765 1.0000000.164706 1.000000 1.0000000.333333 1.000000 1.0000000.498039 1.000000 1.0000000.666667 1.000000 1.0000001.000000 1.000000 0.3294121.000000 0.941176 0.0000001.000000 0.749020 0.0000001.000000 0.658824 0.0000001.000000 0.541176 0.0000001.000000 0.439216 0.0000001.000000 0.301961 0.0000001.000000 0.000000 0.000000];end% colormap subfunctionsfunction baseMap = EdgebaseMap =    [0 0 0;    0 0 1;    0 1 1;    1 1 1;    1 1 0;    1 0 0    0 0 0];endfunction baseMap = NoWhitebaseMap =    [0 0 1;    0 1 1;    1 1 0;    1 0 0];endfunction baseMap = TwoColorsbaseMap =    [0 0 1;    0 1 1;    1 1 1;    1 1 0;    1 0 0];endfunction baseMap = IsoLbaseMap =   [0.9102    0.2236    0.8997    0.4027    0.3711    1.0000    0.0422    0.5904    0.5899    0.0386    0.6206    0.0201    0.5441    0.5428    0.0110    1.0000    0.2288    0.1631];endfunction baseMap = CubicLbaseMap =  [0.4706         0    0.5216;    0.5137    0.0527    0.7096;    0.4942    0.2507    0.8781;    0.4296    0.3858    0.9922;    0.3691    0.5172    0.9495;    0.2963    0.6191    0.8515;    0.2199    0.7134    0.7225;    0.2643    0.7836    0.5756;    0.3094    0.8388    0.4248;    0.3623    0.8917    0.2858;    0.5200    0.9210    0.3137;    0.6800    0.9255    0.3386;    0.8000    0.9255    0.3529;    0.8706    0.8549    0.3608;    0.9514    0.7466    0.3686;    0.9765    0.5887    0.3569];endfunction baseMap = CubicYFbaseMap =  [0.5151    0.0482    0.6697    0.5199    0.1762    0.8083    0.4884    0.2912    0.9234    0.4297    0.3855    0.9921    0.3893    0.4792    0.9775    0.3337    0.5650    0.9056    0.2795    0.6419    0.8287    0.2210    0.7123    0.7258    0.2468    0.7612    0.6248    0.2833    0.8125    0.5069    0.3198    0.8492    0.3956    0.3602    0.8896    0.2919    0.4568    0.9136    0.3018    0.6033    0.9255    0.3295    0.7066    0.9255    0.3414    0.8000    0.9255    0.3529];endfunction baseMap = LinearLbaseMap =  [0.0143	0.0143	0.0143    0.1413	0.0555	0.1256    0.1761	0.0911	0.2782    0.1710	0.1314	0.4540    0.1074	0.2234	0.4984    0.0686	0.3044	0.5068    0.0008	0.3927	0.4267    0.0000	0.4763	0.3464    0.0000	0.5565	0.2469    0.0000	0.6381	0.1638    0.2167	0.6966	0.0000    0.3898	0.7563	0.0000    0.6912	0.7795	0.0000    0.8548	0.8041	0.4555    0.9712	0.8429	0.7287    0.9692	0.9273	0.8961];endfunction baseMap = LinLhotbaseMap =  [0.0225	0.0121	0.0121    0.1927	0.0225	0.0311    0.3243	0.0106	0.0000    0.4463	0.0000	0.0091    0.5706	0.0000	0.0737    0.6969	0.0000	0.1337    0.8213	0.0000	0.1792    0.8636	0.0000	0.0565    0.8821	0.2555	0.0000    0.8720	0.4182	0.0000    0.8424	0.5552	0.0000    0.8031	0.6776	0.0000    0.7659	0.7870	0.0000    0.8170	0.8296	0.0000    0.8853	0.8896	0.4113    0.9481	0.9486	0.7165];endfunction baseMap = IsoAZbaseMap =  [1.0000	0.2627	1.0000    0.9765	0.2941	1.0000    0.9373	0.3255	1.0000    0.8824	0.3647	1.0000    0.8157	0.4078	1.0000    0.7451	0.4549	1.0000    0.6471	0.5137	0.9961    0.4902	0.5882	0.9765    0.3020	0.6745	0.9412    0.1333	0.7490	0.9020    0.0235	0.8000	0.8510    0.0000	0.8196	0.7961    0.0000	0.8275	0.6980    0.0000	0.8314	0.5725    0.0000	0.8353	0.4353    0.0000	0.8392	0.3137    0.0000	0.8392	0.2275    0.0588	0.8353	0.1647    0.1961	0.8196	0.1059    0.3725	0.7961	0.0549    0.5490	0.7686	0.0196    0.6824	0.7412	0.0000    0.7647	0.6941	0.0039    0.8431	0.6157	0.0275    0.9098	0.5176	0.0627    0.9647	0.4275	0.1098    0.9961	0.3569	0.1647    1.0000	0.3255	0.2275    1.0000	0.3059	0.3294    1.0000	0.2863	0.4667    1.0000	0.2745	0.6314    1.0000	0.2667	0.8235];endfunction baseMap = JetbaseMap =  [0 0 0.562500000000000;    0 0 0.625000000000000;    0 0 0.687500000000000;    0 0 0.750000000000000;    0 0 0.812500000000000;    0 0 0.875000000000000;    0 0 0.937500000000000;    0 0 1;    0 0.0625000000000000 1;    0 0.125000000000000 1;    0 0.187500000000000 1;    0 0.250000000000000 1;    0 0.312500000000000 1;    0 0.375000000000000 1;    0 0.437500000000000 1;    0 0.500000000000000 1;    0 0.562500000000000 1;    0 0.625000000000000 1;    0 0.687500000000000 1;    0 0.750000000000000 1;    0 0.812500000000000 1;    0 0.875000000000000 1;    0 0.937500000000000 1;    0 1 1;    0.0625000000000000 1 0.937500000000000;    0.125000000000000 1 0.875000000000000;    0.187500000000000 1 0.812500000000000;    0.250000000000000 1 0.750000000000000;    0.312500000000000 1 0.687500000000000;    0.375000000000000 1 0.625000000000000;    0.437500000000000 1 0.562500000000000;    0.500000000000000 1 0.500000000000000;    0.562500000000000 1 0.437500000000000;    0.625000000000000 1 0.375000000000000;    0.687500000000000 1 0.312500000000000;    0.750000000000000 1 0.250000000000000;    0.812500000000000 1 0.187500000000000;    0.875000000000000 1 0.125000000000000;    0.937500000000000 1 0.0625000000000000;    1 1 0;    1 0.937500000000000 0;    1 0.875000000000000 0;    1 0.812500000000000 0;    1 0.750000000000000 0;    1 0.687500000000000 0;    1 0.625000000000000 0;    1 0.562500000000000 0;    1 0.500000000000000 0;    1 0.437500000000000 0;    1 0.375000000000000 0;    1 0.312500000000000 0;    1 0.250000000000000 0;    1 0.187500000000000 0;    1 0.125000000000000 0;    1 0.0625000000000000 0;    1 0 0;    0.937500000000000 0 0;    0.875000000000000 0 0;    0.812500000000000 0 0;    0.750000000000000 0 0;    0.687500000000000 0 0;    0.625000000000000 0 0;    0.562500000000000 0 0;    0.500000000000000 0 0];endfunction baseMap = IsoAZ180baseMap =  [0.8658	0.5133	0.6237    0.8122	0.5287	0.7241    0.7156	0.5599	0.8091    0.5800	0.5973	0.8653    0.4109	0.6327	0.8834    0.2041	0.6607	0.8603    0.0000	0.6887	0.8071    0.0000	0.6938	0.7158    0.2144	0.6885	0.6074    0.3702	0.6803	0.5052    0.4984	0.6637	0.4192    0.6123	0.6391	0.3635    0.7130	0.6074	0.3492    0.7958	0.5719	0.3787    0.8532	0.5389	0.4445    0.8773	0.5170	0.5348    0.8658	0.5133	0.6237    0.8122	0.5287	0.7241    0.7156	0.5599	0.8091    0.5800	0.5973	0.8653    0.4109	0.6327	0.8834    0.2041	0.6607	0.8603    0.0000	0.6887	0.8071    0.0000	0.6938	0.7158    0.2144	0.6885	0.6074    0.3702	0.6803	0.5052    0.4984	0.6637	0.4192    0.6123	0.6391	0.3635    0.7130	0.6074	0.3492    0.7958	0.5719	0.3787    0.8532	0.5389	0.4445    0.8773	0.5170	0.5348];endfunction baseMap = SwtthbaseMap =  [1.0000	0.5395	1.0000    1.0000	0.5060	1.0000    1.0000	0.4721	1.0000    1.0000	0.4377	1.0000    0.9746	0.4026	1.0000    0.8759	0.3666	1.0000    0.7774	0.3294	1.0000    0.6789	0.2906	1.0000    0.5802	0.2499	1.0000    0.4803	0.2065	1.0000    0.3772	0.1589	1.0000    0.2644	0.1033	1.0000    0.1100	0.0220	1.0000    0.0000	0.0868	0.9879    0.1235	0.1246	1.0000    0.1917	0.2207	1.0000    0.2187	0.3086	1.0000    0.2246	0.3914	1.0000    0.2179	0.4698	1.0000    0.2037	0.5446	1.0000    0.1847	0.6166	1.0000    0.1618	0.6864	1.0000    0.1342	0.7546	1.0000    0.0988	0.8218	1.0000    0.0421	0.8882	1.0000    0.0000	0.9560	0.9951    0.0000	0.9724	0.9345    0.0000	0.9348	0.8244    0.0000	0.8956	0.7181    0.0000	0.8551	0.6170    0.0000	0.8137	0.5236    0.0000	0.7718	0.4409    0.0000	0.7294	0.3730    0.0000	0.6868	0.3235    0.0000	0.6438	0.2933    0.0000	0.5996	0.2752    0.0000	0.5517	0.2474    0.0000	0.5003	0.2065    0.0000	0.4455	0.1476    0.0000	0.4723	0.1742    0.0000	0.5231	0.2118    0.0000	0.5684	0.2279    0.0000	0.6074	0.2202    0.0000	0.6389	0.1747    0.0374	0.6634	0.0000    0.2443	0.7077	0.0000    0.3707	0.7499	0.0000    0.4848	0.7901	0.0000    0.5951	0.8281	0.0000    0.7044	0.8642	0.0000    0.8139	0.8982	0.0000    0.9237	0.9305	0.0000    0.9273	0.8577	0.0000    0.9299	0.7840	0.0000    0.9311	0.7089	0.0000    0.9303	0.6322	0.0000    0.9268	0.5533	0.0000    0.9197	0.4714	0.0000    0.9077	0.3853	0.0000    0.8897	0.2921	0.0000    0.8643	0.1826	0.0000    0.8319	0.0000	0.0159    0.8020	0.0000	0.1461    0.7606	0.0000	0.1769];endfunction baseMap = verd_lilabaseMap =  [0 241 0    80 255 80    134 255 134    187 255 187    255 241 255    255 187 255    255 134 255    255 80 255    241 0 241]/255;endfunction baseMap = verde_marronbaseMap =  [0 255 0;            255 0 255;            255 0 0;            205 133 63;            ]/255;endfunction baseMap = blanco_rojo    baseMap =  [255	255	255	253	245	230;	255	228	180;	243	164	96;	237	118	0;	205	102	29;	224	49	15;	237	0	0;	205	0	0;	139	0	0;    ]/255;endfunction baseMap = barras    baseMap=[252 254 255;250 253 255;247 252 254;244 251 254;242 250 254;239 249 254;236 248 253;234 247 253;231 246 253;229 245 253;226 244 253;223 243 252;221 242 252;218 241 252;215 240 252;213 239 252;210 238 251;207 237 251;205 236 251;202 235 251;199 234 250;197 233 250;194 232 250;191 231 250;189 230 250;186 229 249;183 228 249;181 227 249;178 226 249;176 225 249;173 224 248;170 223 248;168 222 248;165 221 248;162 220 247;157 218 247;155 216 246;152 214 245;150 212 243;148 210 242;146 208 241;143 206 240;141 204 238;139 202 237;136 200 236;134 197 235;132 195 234;129 193 232;127 191 231;125 189 230;123 187 229;120 185 228;118 183 226;116 181 225;113 179 224;111 177 223;109 175 221;106 173 220;104 171 219;102 169 218;100 167 217;97 165 215;95 163 214;93 160 213;90 158 212;88 156 211;86 154 209;83 152 208;81 150 207;79 148 206;77 146 204;72 142 202;72 143 198;72 144 195;72 145 191;72 146 188;72 147 184;72 148 181;72 149 177;72 150 173;72 151 170;72 153 166;72 154 163;72 155 159;72 156 156;72 157 152;72 158 148;72 159 145;72 160 141;72 161 138;73 162 134;73 163 131;73 164 127;73 165 124;73 166 120;73 167 116;73 168 113;73 169 109;73 170 106;73 172 102;73 173 99;73 174 95;73 175 91;73 176 88;73 177 84;73 178 81;73 179 77;73 181 70;78 182 71;83 184 71;87 185 72;92 187 72;97 188 73;102 189 74;106 191 74;111 192 75;116 193 75;121 195 76;126 196 77;130 198 77;135 199 78;140 200 78;145 202 79;150 203 80;154 204 80;159 206 81;164 207 81;169 209 82;173 210 82;178 211 83;183 213 84;188 214 84;193 215 85;197 217 85;202 218 86;207 220 87;212 221 87;217 222 88;221 224 88;226 225 89;231 226 90;236 228 90;240 229 91;245 231 91;250 232 92;250 229 91;250 225 89;250 222 88;249 218 86;249 215 85;249 212 84;249 208 82;249 205 81;249 201 80;249 198 78;249 195 77;248 191 75;248 188 74;248 184 73;248 181 71;248 178 70;248 174 69;248 171 67;247 167 66;247 164 64;247 160 63;247 157 62;247 154 60;247 150 59;247 147 58;246 143 56;246 140 55;246 137 53;246 133 52;246 130 51;246 126 49;246 123 48;246 120 47;245 116 45;245 113 44;245 106 41;244 104 41;243 102 41;242 100 41;241 98 41;240 96 41;239 94 41;239 92 41;238 90 41;237 88 41;236 86 41;235 84 41;234 82 41;233 80 41;232 78 41;231 76 41;230 74 41;229 72 41;228 70 41;228 67 40;227 65 40;226 63 40;225 61 40;224 59 40;223 57 40;222 55 40;221 53 40;220 51 40;219 49 40;218 47 40;217 45 40;217 43 40;216 41 40;215 39 40;214 37 40;213 35 40;211 31 40;209 31 40;207 30 39;206 30 39;204 30 38;202 30 38;200 29 38;199 29 37;197 29 37;195 29 36;193 28 36;192 28 36;190 28 35;188 27 35;186 27 34;185 27 34;183 27 34;181 26 33;179 26 33;178 26 32;176 26 32;174 25 31;172 25 31;171 25 31;169 25 30;167 24 30;165 24 29;164 24 29;162 23 29;160 23 28;158 23 28;157 23 27;155 22 27;153 22 27;151 22 26;150 22 26;146 21 25]/255;endfunction baseMap = sebastia baseMap=[215 227 238 181 202 255 143 179 255 127 151 255 171 207  99 232 245 158 255 250  20 255 209  33 255 163  10 255  76   0]/255;endfunction baseMap = circular baseMap=[  255    0    0       255  125    0      255  255    0      125  255    0       102  204    0      102  255  178        0  255  255        0  125  255        0    0  255      125    0  255     255    0  255      255    0  125 ]/255; endfunction baseMap = jetbaseMap=[ 0   0 143    0   0 159    0   0 175    0   0 191    0   0 207    0   0 223    0   0 239    0   0 255    0  15 255    0  31 255    0  47 255    0  63 255    0  79 255    0  95 255    0 111 255    0 127 255    0 143 255    0 159 255    0 175 255    0 191 255    0 207 255    0 223 255    0 239 255    0 255 255    15 255 239    31 255 223    47 255 207    63 255 191    79 255 175    95 255 159    111 255 143    127 255 127    143 255 111    159 255  95    175 255  79    191 255  63    207 255  47    223 255  31    239 255  15    255 255   0    255 239   0    255 223   0    255 207   0    255 191   0    255 175   0    255 159   0    255 143   0    255 127   0    255 111   0    255  95   0    255  79   0    255  63   0    255  47   0    255  31   0    255  15   0    255   0   0    239   0   0    223   0   0    207   0   0    191   0   0    175   0   0    159   0   0    143   0   0    127   0   0]/255;endfunction baseMap = graybaseMap= [0 0 0;0.0158730158730159 0.0158730158730159 0.0158730158730159;0.0317460317460317 0.0317460317460317 0.0317460317460317;0.0476190476190476 0.0476190476190476 0.0476190476190476;0.0634920634920635 0.0634920634920635 0.0634920634920635;0.0793650793650794 0.0793650793650794 0.0793650793650794;0.0952380952380952 0.0952380952380952 0.0952380952380952;0.111111111111111 0.111111111111111 0.111111111111111;0.126984126984127 0.126984126984127 0.126984126984127;0.142857142857143 0.142857142857143 0.142857142857143;0.158730158730159 0.158730158730159 0.158730158730159;0.174603174603175 0.174603174603175 0.174603174603175;0.190476190476190 0.190476190476190 0.190476190476190;0.206349206349206 0.206349206349206 0.206349206349206;0.222222222222222 0.222222222222222 0.222222222222222;0.238095238095238 0.238095238095238 0.238095238095238;0.253968253968254 0.253968253968254 0.253968253968254;0.269841269841270 0.269841269841270 0.269841269841270;0.285714285714286 0.285714285714286 0.285714285714286;0.301587301587302 0.301587301587302 0.301587301587302;0.317460317460317 0.317460317460317 0.317460317460317;0.333333333333333 0.333333333333333 0.333333333333333;0.349206349206349 0.349206349206349 0.349206349206349;0.365079365079365 0.365079365079365 0.365079365079365;0.380952380952381 0.380952380952381 0.380952380952381;0.396825396825397 0.396825396825397 0.396825396825397;0.412698412698413 0.412698412698413 0.412698412698413;0.428571428571429 0.428571428571429 0.428571428571429;0.444444444444444 0.444444444444444 0.444444444444444;0.460317460317460 0.460317460317460 0.460317460317460;0.476190476190476 0.476190476190476 0.476190476190476;0.492063492063492 0.492063492063492 0.492063492063492;0.507936507936508 0.507936507936508 0.507936507936508;0.523809523809524 0.523809523809524 0.523809523809524;0.539682539682540 0.539682539682540 0.539682539682540;0.555555555555556 0.555555555555556 0.555555555555556;0.571428571428571 0.571428571428571 0.571428571428571;0.587301587301587 0.587301587301587 0.587301587301587;0.603174603174603 0.603174603174603 0.603174603174603;0.619047619047619 0.619047619047619 0.619047619047619;0.634920634920635 0.634920634920635 0.634920634920635;0.650793650793651 0.650793650793651 0.650793650793651;0.666666666666667 0.666666666666667 0.666666666666667;0.682539682539683 0.682539682539683 0.682539682539683;0.698412698412698 0.698412698412698 0.698412698412698;0.714285714285714 0.714285714285714 0.714285714285714;0.730158730158730 0.730158730158730 0.730158730158730;0.746031746031746 0.746031746031746 0.746031746031746;0.761904761904762 0.761904761904762 0.761904761904762;0.777777777777778 0.777777777777778 0.777777777777778;0.793650793650794 0.793650793650794 0.793650793650794;0.809523809523810 0.809523809523810 0.809523809523810;0.825396825396825 0.825396825396825 0.825396825396825;0.841269841269841 0.841269841269841 0.841269841269841;0.857142857142857 0.857142857142857 0.857142857142857;0.873015873015873 0.873015873015873 0.873015873015873;0.888888888888889 0.888888888888889 0.888888888888889;0.904761904761905 0.904761904761905 0.904761904761905;0.920634920634921 0.920634920634921 0.920634920634921;0.936507936507937 0.936507936507937 0.936507936507937;0.952380952380952 0.952380952380952 0.952380952380952;0.968253968253968 0.968253968253968 0.968253968253968;0.984126984126984 0.984126984126984 0.984126984126984;1 1 1]endfunction baseMap = dif_colorsbaseMap=[ 147 112 2190   0   20060  100 230120 155 242176 224 23032  178 170154 205 5046  139 87245 230 190222 184 135255 225 0255 165 0255 69  0178 34  34255 182 193255 20  147]/255;endfunction baseMap = oceano_tierrabaseMap=[ 84   48    5140   81   10191  129   45223  194  125%246  232  195%245  245  245%199  234  229128  205  193 53  151  143  1  102   95  0   60   48]/255;endfunction baseMap=azul_rojobaseMap=[  0  97 128  0 128 161  0 161 191  0 191 224  0 224 255  0 255 255 51 252 252102 252 252153 252 252204 252 252% 255 255 255% 255 255 255% 255 255 255% 255 255 255255 255 255252 252   0252 224   0252 191   0252 161   0252 128   0252  97   0252  64   0252  33   0191   0   0128   0   0]/255;endfunction baseMap=peligrobaseMap=[255 218 185    255 218 185          %222 184 135          %222 184 135         255 215   0         210 105  30         128   0   0         %255  69   0                 ]/255;endfunction baseMap=bonitobaseMap=[ 215 227 238 181 202 255 143 179 255 127 151 255 171 207  99 232 245 158 255 250  20 255 209  33 255 163  10 255  76   0]/255;endfunction baseMap=prueba_timbaseMap=[4   6  19  5   6  20  5   7  21  6   8  23  7   9  24  8  10  26  9  11  27 10  12  29 11  13  30 12  13  31 13  14  33 14  15  34 15  16  36 16  17  37 17  18  39 18  19  40 19  19  42 20  20  43 21  21  44 22  22  46 23  23  47 23  24  49 24  24  50 25  25  52 26  26  53 27  27  55 28  28  56 29  28  58 30  29  59 31  30  61 31  31  62 32  31  64 33  32  65 34  33  67 35  34  68 36  34  70 37  35  71 37  36  73 38  37  74 39  37  76 40  38  78 41  39  79 41  40  81 42  40  82 43  41  84 44  42  85 44  43  87 45  43  89 46  44  90 47  45  92 47  46  94 48  47  95 49  47  97 49  48  98 50  49 100 51  50 102 51  50 103 52  51 105 53  52 107 53  53 108 54  53 110 54  54 112 55  55 113 56  56 115 56  57 117 57  57 118 57  58 120 58  59 122 58  60 123 58  61 125 59  62 127 59  62 128 60  63 130 60  64 132 60  65 133 61  66 135 61  67 137 61  68 138 62  69 140 62  70 141 62  71 143 62  72 144 62  73 146 62  73 147 63  74 149 63  75 150 63  76 151 63  78 153 63  79 154 63  80 155 63  81 157 63  82 158 63  83 159 63  84 160 63  85 161 63  86 162 63  87 163 63  88 164 63  89 165 62  90 166 62  92 167 62  93 168 62  94 169 62  95 170 62  96 171 62  97 171 62  98 172 62  99 173 62 101 173 62 102 174 62 103 175 62 104 175 62 105 176 62 106 176 63 107 177 63 108 178 63 110 178 63 111 179 63 112 179 63 113 180 64 114 180 64 115 180 64 116 181 64 117 181 65 118 182 65 120 182 66 121 183 66 122 183 66 123 183 67 124 184 67 125 184 68 126 185 68 127 185 69 128 185 69 129 186 70 130 186 70 132 187 71 133 187 71 134 187 72 135 188 73 136 188 73 137 188 74 138 189 75 139 189 75 140 189 76 141 190 77 142 190 78 143 191 78 144 191 79 145 191 80 146 192 81 148 192 81 149 192 82 150 193 83 151 193 84 152 194 85 153 194 85 154 194 86 155 195 87 156 195 88 157 195 89 158 196 90 159 196 91 160 197 92 161 197 93 162 197 94 163 198 95 164 198 95 166 199 96 167 199 97 168 199 98 169 200 99 170 200100 171 201101 172 201103 173 201104 174 202105 175 202106 176 203107 177 203108 178 203109 179 204110 180 204111 181 205113 182 205114 184 206115 185 206116 186 206117 187 207119 188 207120 189 208121 190 208123 191 208124 192 209125 193 209127 194 210128 195 210130 196 211131 197 211133 198 211134 199 212136 200 212137 201 213139 202 213140 203 214142 204 214144 205 215146 206 215147 207 216149 208 216151 209 217153 210 217154 211 218156 212 218158 213 219160 214 220162 214 220164 215 221166 216 222168 217 222169 218 223171 219 224173 220 224175 221 225177 222 226179 223 227181 224 227183 225 228185 226 229186 227 230188 228 231190 229 231192 230 232194 230 233196 231 234198 232 235200 233 236201 234 237203 235 238205 236 239207 237 239209 238 240211 239 241213 240 242214 241 243216 242 244218 243 245220 244 246222 245 247224 246 248225 247 249227 249 250229 250 251231 251 251232 252 252234 253 253]/255;endfunction baseMap=puntosbaseMap=[226  31  38246 153 153 41  95 138 95 152 198175 203 227114  59 122173 113 181214 184 218245 126  32253 191 110236   0 140247 153 209  0 174 239 96 200 232 52 160  72179  91  40255 215   0]/255;%  0   0   0%119 119 119endfunction baseMap=prueba_jaimebaseMap=[0       0     255   51      51     255  101     101     255  153     153     255  178     178     255  203     203     255  229     229     255  229     255     229  203     255     203  178     255     178  153     255     153  101     255     101   51     255      51    0     255       0]/255;endfunction baseMap=greenbaseMap=[0.999016 0.999631 0.8926260.997047 0.998893 0.8817990.995079 0.998155 0.8709730.993110 0.997416 0.8601460.991142 0.996678 0.8493200.989173 0.995940 0.8384930.987205 0.995202 0.8276660.985236 0.994464 0.8168400.983268 0.993725 0.8060130.982284 0.993356 0.8006000.979331 0.992249 0.7843600.978347 0.991880 0.7789470.975394 0.990773 0.7627070.974410 0.990404 0.7572930.971457 0.989296 0.7410530.970473 0.988927 0.7356400.964475 0.986574 0.7224450.957093 0.983622 0.7170320.953403 0.982145 0.7143250.942330 0.977716 0.7062050.934948 0.974764 0.7007920.927566 0.971811 0.6953790.923875 0.970334 0.6926720.912803 0.965905 0.6845520.905421 0.962953 0.6791390.898039 0.960000 0.6737260.894348 0.958524 0.6710190.883276 0.954095 0.6628990.875894 0.951142 0.6574860.868512 0.948189 0.6520720.864821 0.946713 0.6493660.853749 0.942284 0.6412460.844214 0.938255 0.6359860.833387 0.933579 0.6308190.822561 0.928904 0.6256520.811734 0.924229 0.6204840.800907 0.919554 0.6153170.795494 0.917216 0.6127340.779254 0.910204 0.6049830.768428 0.905529 0.5998150.757601 0.900854 0.5946480.746774 0.896178 0.5894810.735948 0.891503 0.5843140.725121 0.886828 0.5791470.714295 0.882153 0.5739790.708881 0.879815 0.5713960.692641 0.872803 0.5636450.681815 0.868128 0.5584780.669466 0.862776 0.5533100.656424 0.857117 0.5481430.643383 0.851457 0.5429760.630342 0.845798 0.5378090.617301 0.840138 0.5326410.610780 0.837309 0.5300580.591219 0.828820 0.5223070.578178 0.823160 0.5171400.565136 0.817501 0.5119720.552095 0.811842 0.5068050.539054 0.806182 0.5016380.526013 0.800523 0.4964710.512972 0.794864 0.4913030.506451 0.792034 0.4887200.486890 0.783545 0.4809690.473849 0.777885 0.4758020.460438 0.771488 0.4693430.446905 0.764844 0.4624530.433372 0.758201 0.4555630.419839 0.751557 0.4486740.406305 0.744914 0.4417840.392772 0.738270 0.4348940.379239 0.731626 0.4280050.365706 0.724983 0.4211150.352172 0.718339 0.4142250.338639 0.711696 0.4073360.325106 0.705052 0.4004460.318339 0.701730 0.3970010.298039 0.691765 0.3866670.284506 0.685121 0.3797770.270973 0.678478 0.3728870.257439 0.671834 0.3659980.248904 0.662791 0.3595080.241523 0.653195 0.3531100.234141 0.643599 0.3467130.226759 0.634002 0.3403150.219377 0.624406 0.3339180.211995 0.614810 0.3275200.204614 0.605213 0.3211230.197232 0.595617 0.3147250.189850 0.586021 0.3083280.182468 0.576424 0.3019300.175087 0.566828 0.2955320.171396 0.562030 0.2923340.160323 0.547636 0.2827370.152941 0.538039 0.2763400.145559 0.528443 0.2699420.138178 0.518847 0.2635450.129719 0.511619 0.2601610.121107 0.504729 0.2572090.112495 0.497839 0.2542560.103883 0.490950 0.2513030.095271 0.484060 0.2483510.086659 0.477170 0.2453980.078047 0.470281 0.2424450.069435 0.463391 0.2394930.060823 0.456501 0.2365400.052211 0.449612 0.2335870.043599 0.442722 0.2306340.039293 0.439277 0.2291580.026374 0.428943 0.2247290.017762 0.422053 0.2217760.009150 0.415163 0.2188240.000538 0.408274 0.2158710.000000 0.399769 0.2124570.000000 0.391157 0.2090120.000000 0.382545 0.2055670.000000 0.373933 0.2021220.000000 0.365321 0.1986770.000000 0.356709 0.1952330.000000 0.348097 0.1917880.000000 0.339485 0.1883430.000000 0.330873 0.1848980.000000 0.322261 0.1814530.000000 0.313649 0.1780080.000000 0.309343 0.1762860.000000 0.296424 0.1711190.000000 0.287812 0.1676740.000000 0.279200 0.1642290.000000 0.270588 0.160784];endfunction baseMap=lluviabaseMap=[0   0   0  15   5   9  31  10  18  46  15  27  62  21  37  77  26  46  93  31  55 108  36  64 112  37  62 115  38  61 119  39  59 123  40  58 127  40  56 131  41  55 134  42  53 138  43  52 142  44  50 144  45  46 147  45  43 149  46  40 151  46  37 154  46  34 156  47  31 158  47  28 160  47  25 163  48  22 165  48  19 167  48  15 170  49  12 172  49   9 174  49   6 177  50   3 179  50   0 181  52   0 182  53   0 184  55   0 185  56   0 187  58   0 189  59   0 190  61   0 192  62   0 193  64   0 195  66   0 197  67   0 198  69   0 200  70   0 201  72   0 203  73   0 204  75   0 206  77   0 208  78   0 209  80   0 211  81   0 212  83   0 214  84   0 216  86   0 217  88   0 219  89   0 220  91   0 222  92   0 224  94   0 225  95   0 227  97   0 228  98   0 230 100   0 230 102   2 231 105   4 231 107   6 232 110   8 232 112  10 232 115  12 233 117  14 233 119  16 234 122  18 234 124  20 234 127  21 235 129  23 235 131  25 235 134  27 236 136  29 236 139  31 237 141  33 237 144  35 237 146  37 238 148  39 238 151  41 239 153  43 239 156  45 239 158  47 240 161  49 240 163  51 241 165  53 241 168  55 241 170  57 242 173  59 242 175  61 242 178  62 243 180  64 243 182  66 244 185  68 244 187  70 244 190  72 245 192  74 245 194  76 246 197  78 246 199  80 246 202  82 247 204  84 247 207  86 248 209  88 248 211  90 248 214  92 249 216  94 249 219  96 250 221  98 250 224 100 250 226 102 251 228 104 251 231 105 251 233 107 252 236 109 252 238 111 253 240 113 253 243 115 253 245 117 254 248 119 254 250 121 255 253 123 255 255 125 251 253 123 247 251 121 243 249 119 239 247 117 235 245 115 231 243 113 227 241 111 223 239 109 219 237 107 215 235 105 211 233 104 207 231 102 203 229 100 199 227  98 195 225  96 191 223  94 187 221  92 183 219  90 179 217  88 175 215  86 171 213  84 167 211  82 163 209  80 159 207  78 155 205  76 151 203  74 147 201  72 143 199  70 139 197  68 135 195  66 131 193  64 128 192  62 124 190  61 120 188  59 116 186  57 112 184  55 108 182  53 104 180  51 100 178  49  96 176  47  92 174  45  88 172  43  84 170  41  80 168  39  76 166  37  72 164  35  68 162  33  64 160  31  60 158  29  56 156  27  52 154  25  48 152  23  44 150  21  40 148  20  36 146  18  32 144  16  28 142  14  24 140  12  20 138  10  16 136   8  12 134   6   8 132   4   4 130   2   4 129   3   5 128   4   5 127   5   5 126   6   6 125   6   6 124   7   6 123   8   7 122   9   7 121  10   7 120  11   8 119  12   8 118  12   8 117  13   9 116  14   9 115  15  10 114  16  10 113  17  10 112  18  11 111  19  11 110  20  11 109  20  12 108  21  12 107  22  12 106  23  13 105  24  13 104  25  13 103  26  14 102  26  14 101  27  14 100  28  15  99  29  15  98  30  16  96  32  17  94  34  18  92  36  19  90  38  20  88  40  21  86  42  22  84  44  23  82  46  24  79  49  25  77  51  26  75  53  27  73  55  28  71  57  29  69  59  30  67  61  31  65  63  32  64  64  32  63  65  32  62  66  33  61  67  34  60  68  34  59  69  34  58  70  35  57  71  36  56  72  36  55  73  36  54  74  37  53  75  38  52  76  38  51  77  38  50  78  39  49  79]/255;endfunction baseMap=ColorBoxbaseMap=[250  60  60     0 220   0    30  60 255     0 200 200   240   0 130   230 220  50   240 130  40   160   0 200   160 230  50     0 160 255   230 175  45     0 210 140   130   0 220   170 170 170]/255;endfunction baseMap=ColorBox2baseMap=[226  31  38246 153 153 41  95 138 95 152 198175 203 227114  59 122173 113 181214 184 218245 126  32253 191 110236   0 140247 153 209  0 174 239 96 200 232 52 160  72179  91  40255 215   0  0   0   0119 119 119]/255endfunction baseMap=blanc2jetbaseMap=[ 255 255 255 255 225 225 255 210 210 255 165 165 255 120 120 255  75  75 255   0   0 255 100   0 255 150   0 255 200   0 255 255   0 140 255   0   0 255   0   0 205  95   0 145 200   0   0 255]/255;endfunction baseMap=blanc2sunsetbaseMap=[  255 255 255 239 244 209 232 244 158 170 206  99 226 237  22 255 237   0 255 237 130 244 209 127 237 165  73 229 140  61 219 124  61 239   7  61 232  86 163 155 112 168  99 112 247 127 150 255 142 178 255 181 201 255]/255;endfunction baseMap=wetbaseMap=[255  255  255247  252  240224  243  219204  235  197168  221  181123  204  196 78  179  211 43  140  190  8  104  172  8   64  129  0   32   62]/255;endfunction baseMap=mar baseMap=[255  255  255    254  255  255     253  254  255     253  254  255     252  254  255     251  253  254     250  253  254     250  253  254     249  253  254     248  252  254     247  252  254     247  252  254     246  251  254     245  251  254     244  251  253     243  250  253     243  250  253     242  250  253     241  249  253     240  249  253     240  249  253     239  249  253     238  248  252     237  248  252     237  248  252     236  247  252     235  247  252     234  247  252     233  246  252     233  246  252     232  246  252     231  245  251     230  245  251     230  245  251     229  245  251     228  244  251     227  244  251     227  244  251     226  243  251     225  243  251     224  243  250     223  242  250     223  242  250     222  242  250     221  241  250     220  241  250     220  241  250     219  241  250     218  240  249     217  240  249     217  240  249     215  239  249    214  239  249     213  238  249     212  238  249     211  237  249     209  237  249     208  237  249     207  236  249     206  236  249     205  235  249     204  235  249     203  235  249     202  234  249     201  234  249     199  233  248     198  233  248     197  233  248     196  232  248     195  232  248     194  231  248     193  231  248     192  231  248     190  230  248     189  230  248     188  229  248     187  229  248     186  229  248     185  228  248     184  228  248     183  227  248     182  227  248     180  226  248     179  226  248     178  226  248     177  225  248     176  225  248     175  224  248     174  224  248     173  224  248     172  223  248     170  223  247     169  222  247     168  222  247     167  222  247     166  221  247     165  221  247     164  220  247     163  220  247     161  220  247     160  219  247     157  218  247    156  217  246     154  216  246     153  215  245     152  214  245     150  213  244     149  212  243     148  211  243     146  210  242     145  209  242     144  208  241     142  207  240     141  206  240     140  205  239     138  203  239     137  202  238     135  201  237     134  200  237     133  199  236     131  198  236     130  197  235     129  196  234     127  195  234     126  194  233     125  193  233     123  192  232     122  191  232     121  190  231     119  189  230     118  188  230     117  187  229     115  186  229     114  185  228     113  184  227     111  183  227     110  182  226     109  181  226     107  180  225     106  179  224     105  178  224     103  176  223     102  175  223     100  174  222      99  173  221      98  172  221      96  171  220      95  170  220      94  169  219      92  168  218     91  167  218      90  166  217      87  164  216     86  163  215      85  161  214      84  160  213      83  158  212      82  157  211      81  155  210      80  154  209      79  152  208      78  151  208      77  150  207      76  148  206      75  147  205      74  145  204      73  144  203      72  142  202      71  141  201      70  139  200      69  138  199      68  137  198      67  135  197      66  134  196      65  132  195      64  131  194      63  129  193      62  128  192      62  127  192      61  125  191      60  124  190      59  122  189      58  121  188      57  119  187      56  118  186      55  116  185      54  115  184      53  114  183      52  112  182      51  111  181      50  109  180      49  108  179      48  106  178      47  105  177      46  103  176      45  102  175      44  101  175      43   99  174      42   98  173      41   96  172      40   95  171      39   93  170      36   89  167     36   88  166      36   87  164      35   86  163      35   86  162      35   85  160      35   84  159      35   83  158      35   82  156      34   81  155      34   80  154      34   79  152      34   79  151      34   78  150      34   77  148      33   76  147      33   75  146      33   74  144      33   73  143      33   73  142      33   72  140      32   71  139      32   70  138      32   69  136      32   68  135      32   67  134      32   67  133      31   66  131      31   65  130      31   64  129      31   63  127      31   62  126      30   61  125      30   60  123      30   60  122      30   59  121      30   58  119      30   57  118      29   56  117      29   55  115      29   54  114      29   54  113      29   53  111      29   52  110      28   51  109      28   50  107     28   49  106      28   48  105      28   47  103     28   47  102     27   46  101      27   44   98]/255;endfunction baseMap=wind_elev baseMap=[255 255 255 239 244 209 232 244 158 170 206  99 226 237  22 255 237   0 255 237 130 244 209 127 237 165  73 229 140  61 219 124  61 239   7  61 232  86 163 155 112 168  99 112 247 127 150 255 142 178 255 181 201 255]/255;endfunction baseMap=precip baseMap=[ 255 255 255 214 226 255 181 201 255 142 178 255 127 150 255  99 112 247   0  99 255   0 150 150   0 198  51  99 255   0 150 255   0 198 255  51 255 255   0 255 198   0 255 160   0 255 124   0 255  25   0]/255;end